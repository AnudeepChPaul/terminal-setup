// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "context": "Workspace && vim_mode != insert",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-d": null,
      "ctrl-c": ["workspace::SendKeystrokes", "esc esc esc esc"],
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "cmd-k cmd-d": "zed::OpenDefaultKeymap",
      "cmd-k cmd-k": "zed::OpenKeymap",
      "cmd-k cmd-s": "zed::OpenSettings",
      "shift shift": "file_finder::Toggle",
      "ctrl-g": "git_panel::ToggleFocus",
      "ctrl-e": "project_panel::ToggleFocus",
      "ctrl-w": "workspace::CloseAllDocks"
    }
  },
  {
    "context": "Editor",
    "use_key_equivalents": true,
    "bindings": {
      ">": null,
      "<": null,
      "cmd-d": null,
      "cmd-k": null,
      "cmd-k up": null,
      "cmd-k down": null,
      "cmd-k left": null,
      "cmd-k right": null,
      "cmd-.": null,
      "ctrl-:": null
    }
  },
  // Normal mode
  {
    "context": "Editor && VimControl && !VimWaiting && !menu",
    "bindings": {
      "ctrl-c": ["workspace::SendKeystrokes", "escape escape escape escape"],
      "cmd-k cmd-d": "zed::OpenDefaultKeymap",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "space s v": [
        "workspace::SendKeystrokes",
        "cmd-shift-p pane::SplitRight enter ctrl-l"
      ],
      "space s h": [
        "workspace::SendKeystrokes",
        "cmd-shift-p pane::SplitDown enter ctrl-j"
      ],
      "space 1": ["pane::ActivateItem", 0],
      "space 2": ["pane::ActivateItem", 1],
      "space 3": ["pane::ActivateItem", 2],
      "space 4": ["pane::ActivateItem", 3],
      "space 5": ["pane::ActivateItem", 4],
      "space 6": ["pane::ActivateItem", 5],
      "space 7": ["pane::ActivateItem", 6],
      "space 8": ["pane::ActivateItem", 7],
      "space 9": ["pane::ActivateItem", 8],
      "space 0": "pane::ActivateLastItem",
      "space m": "editor::DuplicateLineDown",
      "ctrl-space": "editor::ShowCompletions",
      "ctrl-shift-space": "editor::ShowWordCompletions",
      "m a": "editor::ToggleCodeActions",
      "m e": "editor::GoToDiagnostic",
      "m r n": "editor::Rename",
      "m shift-e": "editor::GoToPreviousDiagnostic",
      "m i": "editor::ToggleInlineDiagnostics",
      "+": "vim::Increment",
      "-": "vim::Decrement",
      "ctrl-g": "git_panel::ToggleFocus",
      "ctrl-e": "project_panel::ToggleFocus"
    }
  },
  // VISUAL, VISUAL LINE, and VISUAL BLOCK modes
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      "ctrl-c": ["workspace::SendKeystrokes", "escape escape escape escape"],
      ">": "editor::Indent",
      "<": "editor::Backtab",
      "g c": "editor::ToggleComments",
      "Shift-j": "editor::MoveLineDown",
      "Shift-k": "editor::MoveLineUp"
    }
  },
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "ctrl-space": "editor::ShowCompletions",
      "ctrl-shift-space": "editor::ShowWordCompletions"
    }
  },
  // vim motion
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !VimObject",
    "bindings": {
      "s": "vim::PushAddSurrounds"
    }
  },
  {
    "context": "Editor && showing_code_actions",
    "use_key_equivalents": true,
    "bindings": {
      "enter": "editor::ConfirmCodeAction"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-k": "editor::ContextMenuPrevious",
      "ctrl-p": "editor::ContextMenuPrevious",
      "ctrl-j": "editor::ContextMenuNext",
      "ctrl-n": "editor::ContextMenuNext"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-e": "workspace::ToggleRightDock",
      "ctrl-c": ["workspace::SendKeystrokes", "cmd-alt-y"],
      "left": "project_panel::CollapseSelectedEntry",
      "right": "project_panel::ExpandSelectedEntry",
      "n": "project_panel::NewFile",
      "D": "project_panel::Duplicate",
      "a": "project_panel::NewDirectory",
      "x": "project_panel::Cut",
      "y": "project_panel::Copy",
      "p": "project_panel::Paste",
      "c": "workspace::CopyPath",
      "shift-c": "workspace::CopyRelativePath",
      "d": ["project_panel::Trash", { "skip_prompt": false }],
      "o": "project_panel::RevealInFileManager",
      "e": "project_panel::OpenWithSystem",
      "r": "project_panel::Rename",
      "/": "project_panel::NewSearchInDirectory",
      "shift-j": "menu::SelectNext",
      "shift-k": "menu::SelectPrevious",
      "escape": "menu::Cancel"
    }
  },
  {
    "context": "ProjectPanel && !not_editing",
    "bindings": {}
  },
  {
    "context": "Prompt",
    "use_key_equivalents": true,
    "bindings": {
      "left": "menu::SelectPrevious",
      "right": "menu::SelectNext",
      "h": "menu::SelectPrevious",
      "ctrl-h": "menu::SelectPrevious",
      "l": "menu::SelectNext",
      "ctrl-l": "menu::SelectNext"
    }
  },
  {
    "context": "Picker > Editor",
    "bindings": {
      "ctrl-k": "menu::SelectPrevious",
      "ctrl-j": "menu::SelectNext"
    }
  },
  {
    "context": "GitPanel",
    "bindings": {
      "ctrl-g": "git_panel::Close",
      "ctrl-e": "project_panel::ToggleFocus"
    }
  },
  {
    "context": "GitPanel > Editor",
    "bindings": {
      "ctrl-g": "git_panel::Close",
      "ctrl-e": "project_panel::ToggleFocus"
    }
  }
]
